package word_math;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;

public class Solution {
	static int alpha_digit[];
	static int alpha[];
	static int arr_max = 0;

	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		alpha = new int[26];
		alpha_digit = new int[26];
		int c = Integer.parseInt(bf.readLine());
		String input[] = new String[c];
		for (int k = 0; k < c; k++) {
			input[k] = bf.readLine();
			// 자릿수 max 구하기
			if (input[k].length() > arr_max)
				arr_max = input[k].length();

			int l = input[k].length();
			// 8의 자리로 다 맞추기
			if (l != 8) {
				for (int j = 0; j < 8 - l; j++) {
					StringBuffer str = new StringBuffer(input[k]);
					str.insert(0, 0);
					input[k] = str.toString();
				}
			}
			// 알파벳 배열 크기 구하기
			for (int i = 0; i < c; i++) {
				for (int j = 0, h = 8; j < 8; j++, h--) {
					if (input[i].charAt(j) != '0') {
						alpha[input[i].charAt(j) - 65] += (int) Math.pow(10, h - 1);
					}
				}
			}
		}
		getDigit(alpha, 9);
		int answer = 0;
		for (int i = 0; i < alpha_digit.length; i++) {
			if (arr_max > 0) {
				answer += alpha_digit[i] * (int) Math.pow(10, arr_max - 1);
				arr_max--;
			}
		}
		System.out.println(answer);
	}

	// 알파벳 자릿수 구하기
	public static void getDigit(int arr[], int digit) {
		if (digit == 0)
			return;
		int max = 0;
		int idx = -1;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] > max) {
				max = arr[i];
				idx = i;
				arr[i] = 0;
			}
		}
		if(idx != -1) {
			alpha_digit[idx] = digit;
		}
		getDigit(arr, digit - 1);
	}
}
